{"version":3,"sources":["types.js","Components/App.js","actions/index.js","reducers/index.js","reducers/allDataReducer.js","reducers/countryDataReducer.js","index.js"],"names":["COUNTRY_DATA","ALL_COUNTRY_DATA","connect","state","allCountriesCovidStats","countryCovidStats","fetchCountry","countryName","days","dispatch","a","axios","get","countryData","console","log","status","type","payload","fetchGlobal","allData","useState","country","province","formData","setFormData","useEffect","className","cases","Object","keys","map","date","i","deaths","recovered","action","onSubmit","e","preventDefault","name","placeholder","onChange","target","value","timeline","rootReducers","combineReducers","data","store","createStore","compose","applyMiddleware","thunk","window","devToolsExtension","f","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.4eca6446.chunk.js","sourcesContent":["export const COUNTRY_DATA = 'COUNTRY_DATA'\nexport const ALL_COUNTRY_DATA = 'ALL_COUNTRY_DATA'\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport { fetchCountry, fetchGlobal } from '../actions'\n\nimport '../index.css'\n\nconst App = ({\n    fetchCountry,\n    fetchGlobal,\n    allCountriesCovidStats,\n    countryCovidStats,\n}) => {\n    // set up some local state to manage the inputs\n    const [formData, setFormData] = useState({\n        country: '',\n        province: '',\n    })\n\n    useEffect(() => {\n        fetchGlobal()\n    }, [])\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n        fetchCountry(formData.country)\n        // call an action with the country name from the form\n        // you could add some form of verfication for the correct country name\n    }\n\n    // we add into the local state object a key value pair, with\n    // the name of the text input that is calling the onChange, and the\n    // value of the input\n    // use the spread operator to make sure that you don't erase the state on each input\n    const onChange = (e) => {\n        setFormData({ ...formData, [e.target.name]: e.target.value })\n    }\n\n    const renderCountryCovidStats = () => {\n        return Object.keys(countryCovidStats.timeline.cases).map((date, i) => {\n            return (\n                <div key={i} className=\"card\">\n                    <p>{date}</p>\n                    <p>{countryCovidStats.timeline.cases[date]} cases</p>\n                    <p>{countryCovidStats.timeline.deaths[date]} deaths</p>{' '}\n                    <p>\n                        {countryCovidStats.timeline.recovered[date]} recovered\n                    </p>\n                </div>\n            )\n        })\n    }\n\n    const renderAllCountriesCovidStats = () => {\n        console.log(allCountriesCovidStats)\n        return Object.keys(allCountriesCovidStats.cases).map((date, i) => {\n            return (\n                <div key={i} className=\"card\">\n                    <p>{date}</p>\n                    <p>{allCountriesCovidStats.cases[date]} cases</p>\n                    <p>{allCountriesCovidStats.deaths[date]} deaths</p>{' '}\n                    <p>{allCountriesCovidStats.recovered[date]} recovered</p>\n                </div>\n            )\n        })\n    }\n\n    return (\n        <div className=\"app\">\n            <div className=\"title item\">Covid Tracker</div>\n\n            <div className=\"global-data\">\n                {allCountriesCovidStats.cases\n                    ? renderAllCountriesCovidStats()\n                    : 'fetching global data'}\n            </div>\n\n            <form action=\"\" onSubmit={(e) => onSubmit(e)} className=\"form item\">\n                <input\n                    type=\"text\"\n                    name=\"country\"\n                    placeholder=\"country\"\n                    className=\"input item\"\n                    onChange={(e) => onChange(e)}\n                />\n\n                <button className=\"button item\" type=\"submit\">\n                    Search\n                </button>\n            </form>\n\n            <div className=\"title\">\n                {countryCovidStats\n                    ? countryCovidStats.country\n                    : 'Global Covid Stats'}\n            </div>\n\n            <div className=\"\">\n                {countryCovidStats.timeline\n                    ? renderCountryCovidStats()\n                    : 'Enter a country for localized covid data'}\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        allCountriesCovidStats: state.allCountriesCovidStats,\n        countryCovidStats: state.countryCovidStats,\n    }\n}\n\nexport default connect(mapStateToProps, { fetchCountry, fetchGlobal })(App)\n","import axios from 'axios'\n\nimport { COUNTRY_DATA, ALL_COUNTRY_DATA } from '../types'\n\nexport const fetchCountry = (countryName, days) => async (dispatch) => {\n    const countryData = await axios.get(\n        `http://disease.sh/v3/covid-19/historical/${countryName}?lastdays=5`\n    )\n\n    console.log(countryData)\n    delete countryData.status\n\n    dispatch({ type: COUNTRY_DATA, payload: countryData })\n}\n\nexport const fetchGlobal = () => async (dispatch) => {\n    const allData = await axios.get(\n        // 'http://disease.sh/v3/covid-19/historical/all'\n        'https://disease.sh/v3/covid-19/historical/all?lastdays=2'\n    )\n\n    // dispatch all data from the country\n    dispatch({ type: ALL_COUNTRY_DATA, payload: allData })\n}\n","import { combineReducers } from 'redux'\n\nimport { allDataReducer } from './allDataReducer'\nimport { countryDataReducer } from './countryDataReducer'\n\nexport const rootReducers = combineReducers({\n    allCountriesCovidStats: allDataReducer,\n    countryCovidStats: countryDataReducer,\n})\n","import { ALL_COUNTRY_DATA } from '../types'\n\nexport const allDataReducer = (state = [], { type, payload }) => {\n    switch (type) {\n        case ALL_COUNTRY_DATA:\n            return { ...state, ...payload.data }\n        default:\n            return state\n    }\n}\n","import { COUNTRY_DATA } from '../types'\n\nexport const countryDataReducer = (state = [], { type, payload }) => {\n    switch (type) {\n        case COUNTRY_DATA:\n            return { ...payload.data }\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport App from './Components/App'\nimport { rootReducers } from './reducers'\n\nconst store = createStore(\n    rootReducers,\n    compose(\n        applyMiddleware(thunk),\n        window.devToolsExtension ? window.devToolsExtension() : (f) => f\n    )\n)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root')\n)\n"],"sourceRoot":""}